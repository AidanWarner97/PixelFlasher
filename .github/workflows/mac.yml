#
# Copyright (C) 2024 Badabing2005
# SPDX-License-Identifier: AGPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
# for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Also add information on how to contact you by electronic and paper mail.
#
# If your software can interact with users remotely through a computer network,
# you should also make sure that it provides a way for users to get its source.
# For example, if your program is a web application, its interface could
# display a "Source" link that leads users to an archive of the code. There are
# many ways you could offer source, and different solutions will be better for
# different programs; see section 13 for the specific requirements.
#
# You should also get your employer (if you work as a programmer) or school, if
# any, to sign a "copyright disclaimer" for the program, if necessary. For more
# information on this, and how to apply and follow the GNU AGPL, see
# <https://www.gnu.org/licenses/>.

name: Build for macOS

env:
  ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the workflow will run
on:
  # push:
    # # Sequence of patterns matched against refs/tags
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build tags'

jobs:
  build_mac_13:
    if: ${{ github.actor == 'badabing2005' }}
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    # runs-on: macos-latest
    runs-on: macos-15-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List Cellar directory
        run: |
          ls /usr/homebrew/Cellar

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install wxPython
        run: pip install wxPython

      - name: Install node
        run: |
          brew install node

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install ImageMagick
        run: |
          brew install imagemagick

      - name: Install create-dmg
        run: |
          npm cache clean --force
          npm install --global create-dmg
          # Check if 'util.isDate' is patched
          if grep -q "util.isDate" "$(npm root -g)/create-dmg/node_modules/macos-alias/lib/encode.js"; then
            echo "Patching util.isDate..."
            sed -i.bak "s/util.isDate/((val) => Object.prototype.toString.call(val) === '[object Date]')/g" \
              "$(npm root -g)/create-dmg/node_modules/macos-alias/lib/encode.js"
          fi

      - name: Add Python 3.13 to PATH
        run: export PATH=/usr/homebrew/Cellar/python@3.13/bin:$PATH

      - name: Create virtual environment
        run: python3.13 -m venv myenv
        shell: bash

      - name: Activate virtual environment
        run: source myenv/bin/activate
        shell: bash

      - name: Install requirements
        run: python3.13 -m pip install -r requirements.txt

      - name: List modules and their versions
        run: python3.13 -m pip freeze

      # Build application
      - name: Build application
        id: build_app
        run: |
          ./build.sh
        continue-on-error: true

      # if the previous step fails, rename the app file and upload it as an artifact
      # otherwsie rename the dmg file and upload it as an artifact

      # Upload app artifacts Mac-OS 13 to Actions
      - name: Upload macOS app Artifacts
        if: ${{ steps.build_app.outcome == 'failure' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }} # Only run this step when running in GitHub Actions
        uses: actions/upload-artifact@v4
        id: upload_app_artifacts_macOS
        with:
          name: PixelFlasher_macOS.app Artifacts
          path: |
            dist/PixelFlasher_macOS.app
            dist/PixelFlasher_macOS.app.sha256

      - name: Upload PixelFlasher.app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: PixelFlasher.app
          path: dist/PixelFlasher.app
        if: ${{ steps.build_app.outcome == 'success' }}

      - name: Rename the file
        run: mv dist/PixelFlasher.dmg dist/PixelFlasher_macOS.dmg
        if: ${{ steps.build_app.outcome == 'success' }}

      - name: Get sha256
        run: |
          shasum -a 256 dist/PixelFlasher_macOS.dmg > dist/PixelFlasher_macOS.dmg.sha256
          cat dist/PixelFlasher_macOS.dmg.sha256
        if: ${{ steps.build_app.outcome == 'success' }}

      - name: List contents of dist directory
        run: ls dist
        if: ${{ steps.build_app.outcome == 'success' }}

      # Upload dmg artifacts Mac-OS 13 to Actions
      - name: Upload macOS Artifact
        if: ${{ steps.build_app.outcome == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }} # Only run this step when running in GitHub Actions
        uses: actions/upload-artifact@v4
        id: upload_artifact_macOS
        with:
          name: PixelFlasher_macOS.dmg Artifacts
          path: |
            dist/PixelFlasher_macOS.dmg
            dist/PixelFlasher_macOS.dmg.sha256
